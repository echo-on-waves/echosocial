= Permissions

Permissions are used throughout crabgrass to check the authorization and displaying links only if the user actually may use them.
  permissions 'group', 'base_page/assets'
will include the modules found in app/permissions/group_permission.rb and app/permissions/base_page/assets_permission.rb.

These mainly consist of methods of the form
  def may_action_controller?(object=@object)
    logged_in? and...
  end

  %w[other_action third_one].each { |action|
    alias_method "may_#{action}_controller?".to_sym, :may_action_controller?
  }

They are called from:
 * may?(:controller, 'action', object)
 * link_if_may?("link text", :controller, 'action', object, link_options {}, html_options)
 * link_to_active_if_may?("link text", :controller, 'action', object, link_options {}, html_options)
 * may_action('action', object)

== Authorized?

+may_action* defaults to the current controller and is mostly used in controllers for authorization. Now we have a default authorized? method in the ApplicationController:
  def authorized?
    may_action?(params[:action])
  end

So if you add a before_filter :login_required to your controller it will look for may_action_controller? and so on. In a few cases it still makes sense to overwrite the authorized? method. For example in order to take care of all the add_+ ajax functions in the ProfileController we now have:
   def authorized?
     params[:action] =~ /add_/ ?
       may_action?('update', @entity) :
       may_action?(params[:action], @entity)
   end

Other options would be a long list of alias_methods or overwriting the method_missing method in permissions.

==Finding the right Permission function

+may_action+ calls may?(controller, action, *args) for the current controller. may? looks for the appropriate permission functions. They all have the form of '*may_*action*_*domain*?'.
* action:: is the action parameter to may? and therefore params\[:action\] for controllers that do not overwrite the authorized? method.
*  domain:: may? looks for permissions in the following order:
 1. controller_name:: domain for Me:TrashController -> may_action_trash?
 2. parent_namespace:: domain for Me:TrashController -> may_action_me?
 3. super class controller_name:: domain for WikiPageController -> may_action_base_page?

== Helpers

+link_if_may?+ is great for link helpers. It returns false if the link is not allowed so you can do
 link_if_may(I18n.t(:join_group, :group_type => @group_type),
             :membership, 'join', @group) or
 link_if_may(I18n.t(:request_join_group_link, :group_type => @group_type),
             :requests, 'create_join', @group)

==Permissions in mods and tools

Engines has been adjusted to add app/permissions to the code path for plugins and mix them in. So adding and overwriting permissions in tools and mods should be as easy as creating them in app/permissions in the plugins directory. For tools note that if a permission method is not found may? looks for the corresponding permission function of the super class - in most cases this will be base_page.

==Issues

===error messages

We might want customized error messages if permissions are denied. This was done for contacts before like this:
  def remove
    unless current_user.friend_of?(@user)
      flash_message_now :error => I18n.t(:not_contact_of) % @user.name
      return
    end
    ...
  end

Now we want the friend_of? in the permission so we can use the may_remove_contact? or link_if_may from the helpers and views. But just returning false will throw the normal PermissionDenied exception. If we add the flash_message to the permission it will be displayed even if just a link was not to be displayed.
